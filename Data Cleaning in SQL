/*

Cleaning Data in SQL Queries

*/

-- 1. Removed duplicates
-- 2. Standardized the date
-- 3. Removed Null Values or blank values
-- 4. Removed any columns and rows not needed



SELECT *
FROM	layoffs;

=== created a new table (called layoffs_staging) and populated same with values from the original table so as not to alter the original data.

CREATE TABLE layoffs_staging
LIKE layoffs;

INSERT layoffs_staging
SELECT *
FROM layoffs;


=== to confirm/check for duplicates, we created a new column 'row_num'. 

with duplicate_CTE as
(
SELECT *,
ROW_NUMBER() OVER(
PARTTION BY company, location, percentage_laid_off, industry, total_laid_off, percentage_laid_off, `date`, stage, country, funds_raised_millions) AS row_num
FROM	layoffs_staging
)
SELECT *
FROM duplicate_cte
WHERE row_num > 1;


=== we created another table, 'layoffs_staging2' to allow for data manipulation, and we deleted the duplicate values across the table.

CREATE TABLE `layoffs_staging2` (
  `company` text,
  `location` text,
  `industry` text,
  `total_laid_off` int DEFAULT NULL,
  `percentage_laid_off` text,
  `date` text,
  `stage` text,
  `country` text,
  `funds_raised_millions` int DEFAULT NULL,
  `row_num` INT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;


=== we checked columns by columns seraching for duplicate values using the 'DISTINCT' statement

SELECT DISTINCT country
FROM	layoffs_staging2
ORDER BY 1;














































